#!/usr/bin/env sos-runner
#fileformat=SOS1.0

# Various calls to commands to accomplish some workflow
# When some workflow gets complicated they will be separated into dedicated files

[genotype_stats_1]
# making genotype summary statistics via vcftools
parameter: workdir = None
input: pattern = "{name}.vcf.gz"
output: expand_pattern("${CONFIG['wd']}/${name!b}.imiss"), expand_pattern("${CONFIG['wd']}/${name!b}.lmiss")
task: workdir = workdir
run: 
  vcftools --gzvcf ${input} --out ${output[0]!n} --missing-indv
  vcftools --gzvcf ${input} --out ${output[1]!n} --missing-site

[genotype_stats_2]
# making genotype summary statistics plot
parameter: workdir = None
depends: Py_Module("seaborn")
input: group_by = 1, pattern = "{name}.{ext}"
output: expand_pattern("{_name}.{_ext}.pdf")
task: workdir = workdir
python:
import matplotlib.pyplot as plt, seaborn as sns, pandas as pd
fig, axs = plt.subplots(ncols=2)
data = pd.read_csv(${_input!r}, sep = '\t')
sns.distplot(data["F_MISS"], ax = axs[0], kde = False)
sns.violinplot(data["F_MISS"], ax = axs[1])
axs[0].set_title(${_input!br}.split('.')[-1])
fig.savefig(${_output!r})

[rnaseq_1]
# Format RNA-seq data
# Based on https://github.com/QuackenbushLab/yarn/blob/master/R/downloadGTEx.R
# Handle all in R
depends: R_library("QuackenbushLab/yarn")
R:
  library(yarn)

  message("Loading input expression data")
  pd <- read_tsv(${input[1]!r})
  pd <- as.matrix(pd)
  rownames(pd) <- pd[, "SAMPID"]
  ids <- sapply(strsplit(pd[, "SAMPID"], "-"), function(i) paste(i[1:2],  collapse = "-"))

  pd2 <- read_tsv(${input[2]!r})
  pd2 <- as.matrix(pd2)
  rownames(pd2) <- pd2[, "SUBJID"]
  pd2 <- pd2[which(rownames(pd2) %in% unique(ids)), ]
  pd2 <- pd2[match(ids, rownames(pd2)), ]
  rownames(pd2) <- colnames(counts)

  pdfinal <- AnnotatedDataFrame(data.frame(cbind(pd, pd2)))
  cnts <- suppressWarnings(read_tsv(${input[0]!r}, skip = 2))
  genes <- unlist(cnts[, 1])
  geneNames <- unlist(cnts[, 2])
  counts <- cnts[, -c(1:2)]
  counts <- as.matrix(counts)
  rownames(counts) <- genes
  for (i in 1:nrow(problems(cnts))) {
    counts[problems(cnts)$row[i], problems(cnts)$col[i]] <- 1e+05
  }
  throwAway <- which(rowSums(counts) == 0)
  counts <- counts[-throwAway, ]
  genes <- sub("\\..*", "", rownames(counts))

  host <- "dec2013.archive.ensembl.org"
  biomart <- "ENSEMBL_MART_ENSEMBL"
  dataset <- "hsapiens_gene_ensembl"
  attributes <- c("ensembl_gene_id", "hgnc_symbol", "chromosome_name",
                  "start_position", "end_position", "gene_biotype")

  message("Creating ExpressionSet")
  pdfinal <- pdfinal[match(colnames(counts), rownames(pdfinal)), ]
  es <- ExpressionSet(as.matrix(counts))
  phenoData(es) <- pdfinal

  message("Annotating from biomaRt")
  es <- annotateFromBiomart(obj = es, genes = genes, host = host,
                            biomart = biomart, dataset = dataset, attributes = attributes)
  message("Save processed expression data")
  saveRDS(es, file = ${output!r})

[rnaseq_2]
# Quantile normalization of RNA-seq data
# 1. expression values are quantile normalized to the average empirical distribution observed across samples
# 2. for each gene, expression values are inverse quantile normalized to a standard normal distribution across samples
# genes are selected based on expression thresholds of >0.1 RPKM in >10 samples and >5 reads in >10 samples
# input are rpkm file, count file, sample annotation file and vcf file
parameter: rpkm_cutoff = 0.1
parameter: read_cutoff = 5
parameter: sample_cutoff = 10
parameter: script = os.path.abspath("../src/Aguet/normalize_expression.py")
output: "${CONFIG['wd']}/${input[0]!nnnb}.bed.gz", "${CONFIG['wd']}/${input[0]!nnnb}.fpkm.bed.gz", "${CONFIG['wd']}/${input[0]!nnnb}.for_peer.txt"
task: workdir = workdir
run:
  python ${script} ${input[0]} ${input[1]} ${input[2]} ${input[3]} ${output[0]!nn} --expression_threshold ${rpkm_cutoff} --count_threshold ${read_cutoff} --min_samples ${sample_cutoff}

[rnaseq_3]
# PEER analysis

[covariate_regression]
# Remove covariate from expression data