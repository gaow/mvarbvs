#!/usr/bin/env sos-runner
#fileformat=SOS1.0

# Various calls to commands to accomplish some workflow
# When some workflow gets complicated they will be separated into dedicated files

[genotype_stats_1]
# making genotype summary statistics via vcftools
parameter: workdir = None
depends: executable("vcftools")
input: pattern = "{name}.vcf.gz"
output: expand_pattern("${CONFIG['wd']}/${name!b}.imiss"), expand_pattern("${CONFIG['wd']}/${name!b}.lmiss")
task: workdir = workdir
run: 
  vcftools --gzvcf ${input} --out ${output[0]!n} --missing-indv
  vcftools --gzvcf ${input} --out ${output[1]!n} --missing-site

[genotype_stats_2]
# making genotype summary statistics plot
parameter: workdir = None
depends: Py_Module("seaborn")
input: group_by = 1, pattern = "{name}.{ext}"
output: expand_pattern("{_name}.{_ext}.pdf")
task: workdir = workdir
python:
import matplotlib.pyplot as plt, seaborn as sns, pandas as pd
fig, axs = plt.subplots(ncols=2)
data = pd.read_csv(${_input!r}, sep = '\t')
sns.distplot(data["F_MISS"], ax = axs[0], kde = False)
sns.violinplot(data["F_MISS"], ax = axs[1])
axs[0].set_title(${_input!br}.split('.')[-1])
fig.savefig(${_output!r})

[rnaseq_1]
# Quantile normalization of RNA-seq data
# 1. expression values are quantile normalized to the average empirical distribution observed across samples
# 2. for each gene, expression values are inverse quantile normalized to a standard normal distribution across samples
# genes are selected based on expression thresholds of >0.1 RPKM in >10 samples and >5 reads in >10 samples
# input are rpkm file (for normalization), count file (for QC) and vcf file (for removing samples that do not have genotypes)
parameter: rpkm_cutoff = 0.1
parameter: read_cutoff = 5
parameter: sample_cutoff = 10
parameter: script = os.path.abspath("../src/normalize_expression.py")
output: "${CONFIG['wd']}/${input[0]!nnb}.qnorm.std.flat.h5", "${CONFIG['wd']}/${input[0]!nnb}.qnorm.flat.h5", "${CONFIG['wd']}/${input[0]!nnb}.qnorm.std.h5", "${CONFIG['wd']}/${input[0]!nnb}.qnorm.h5"
task: workdir = workdir
run:
  python ${script} ${input[0]} ${input[1]} ${input[2]} ${input[3]} ${input[0]!nnb} --expression_threshold ${rpkm_cutoff} --count_threshold ${read_cutoff} --min_samples ${sample_cutoff}

[rnaseq_2]
# PEER analysis
# There are a number of configuable parameters coded in run_PEER.R interface
# That have default value. Can be changed here or not depending on the analyst
depends: R_library('rhdf5'), R_library('peer'), R_library('argparser')
parameter: num_peer = 35
parameter: script = os.path.abspath("../src/run_PEER.R")
output: "${input[0]!n}_PEER_covariates.txt", "${input[0]!n}_PEER_alpha.txt", "${input[0]!n}_PEER_residuals.txt"
task: workdir = workdir
run:
Rscript ${script} ${input[0]} ${input[0]!n} ${num_peer}

[covariate_regression]
# Remove covariate from expression data