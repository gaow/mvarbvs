#!/usr/bin/env sos-runner
#fileformat=SOS1.0
#
# MatrixEQTL pipeline
#

import pandas as pd

[matrix_eqtl_1]
parameter: ann_file = None
parameter: geno_file = None
parameter: expr_file = None
parameter: covar_file = None
parameter: per_batch = 500
parameter: prefix = None 
parameter: workdir = None
gene_groups = [x.strip().split() for x in open(ann_file).readlines()] 
gene_groups = ['/chr{}/{}'.format(x[0], x[3]) for x in gene_groups if x[0].isnumeric()] 
gene_groups = [gene_groups[i:i+per_batch] for i in range(0, len(gene_groups), per_batch)]
conditions = list(pd.HDFStore(expr_file).keys())
input: geno_file, expr_file, covar_file, for_each = ['gene_groups']
output: ['/tmp/1.txt']
#task: workdir = workdir
R:
# http://www.bios.unc.edu/research/genomic_software/Matrix_eQTL/html/SlicedData-class.html
# source("http://bioconductor.org/biocLite.R")
# biocLite("rhdf5")
library(rhdf5)
load_table = function(h_file, h_table, fix_sample = T, fix_gene = T) {
    hdata <- h5read(h_file, h_table)
    res = hdata$block0_values
    colnames(res) = hdata$axis1
    rownames(res) = hdata$axis0
    return(res)
}

run_MatrixEqtl = function(geno, expr, covar) {

}

res = list()
for (cond in c(${conditions!r,})) {
    res[[cond]] = list
    covar = load_table(${covar_file!ar}, cond)
    expr = load_table(${expr_file!ar}, cond)
    for (gene in c(${_gene_groups!r,})) {
        geno = load_table(${geno_file!ar}, gene, fix_sample = F, fix_gene = F)
        res[[cond]][[basename(gene)]] = run_MatrixEqtl(geno, expr[, basename(gene)], covar)
    }
}
